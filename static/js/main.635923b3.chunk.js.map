{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAa,CACfC,OAAO,CAACC,KAAK,uBACbC,SAAU,OAEVC,OAAO,CAACF,KAAK,qBACbC,SAAU,eAyBCE,EAZM,SAACC,GAElB,IAZeC,EAAIC,EAYbC,GAZSF,EAYUD,EAAMC,KAZZC,GAYiB,IAAIE,MAAOC,YAVrC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAEpBA,EAAM,EAAI,SAAW,UAKN,EAGJP,EAAaS,GAA7BP,EAHoB,EAGpBA,KAAMC,EAHc,EAGdA,SAEhB,OAAO,yBAAKS,UAAS,yBAAoBH,IACrC,uBAAGG,UAAS,4BAAwBT,EAAxB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BVU,EAAU,SAACP,GACb,OACA,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKnDD,EAAQE,aAAa,CACjBD,QAAS,WAEED,QCJTG,E,4MAIFC,MAAM,CAACV,IAAK,KAAMW,aAAc,I,kEAEZ,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAG,EAAKC,SAAS,CAACjB,IAAIgB,EAASE,OAAOC,cAC9C,SAAAC,GAAG,OAAE,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,sCAQ1C,OAAGc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,uCAAaqB,KAAKX,MAAMC,eAE1BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAElC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAQ5B,OACI,yBAAKF,UAAU,eACVgB,KAAKC,qB,GAjCJC,IAAMC,WAyCxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,W","file":"static/js/main.635923b3.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\n\r\nconst seasonConfig={\r\n    summer:{text:\"Let's hit the beach!\",\r\n    iconName: 'sun'\r\n},\r\n    winter:{text:\"Burr, It is Chilly\",\r\n    iconName: 'snowflake'\r\n}\r\n};\r\nconst getSeason = (lat,month)=>{\r\n\r\n    if(month >2 && month < 9){\r\n       return lat > 0 ? 'summer' : 'winter';\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n};\r\n\r\n\r\nconst SeasonDisplay =(props)=>{\r\n\r\n    const season = getSeason(props.lat, new Date().getMonth( ));\r\n    const{text, iconName}=seasonConfig[season];\r\n\r\nreturn <div className={`season-display ${season}`}>\r\n    <i className ={`icon-left massive ${iconName} icon`}/>\r\n    <h1>{text}</h1>\r\n    <i className={`icon-right massive ${iconName} icon`}/>\r\n    </div>;\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return(\r\n    <div className=\"ui active dimmer\">\r\n        <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps={\r\n    message: 'Loading'\r\n};\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    \r\n\r\n    state={lat: null, errorMessage: ''};\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position=> this.setState({lat:position.coords.latitude}),\r\n            err=>this.setState({errorMessage: err.message})\r\n        );\r\n    }\r\n\r\n    \r\n\r\n\r\n    renderContent(){\r\n        if(this.state.errorMessage && !this.state.lat){\r\n            return<div>Error: {this.state.errorMessage}</div>;\r\n            }\r\n            if(!this.state.errorMessage && this.state.lat){\r\n                return<SeasonDisplay lat={this.state.lat}/>;\r\n            }\r\n            return <Spinner message=\"Please accept location request\"/>;\r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\" border red\">\r\n                {this.renderContent()}\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}